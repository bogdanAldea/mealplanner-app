[1mdiff --git a/model/json_backend.py b/model/json_backend.py[m
[1mindex e69de29..96a1023 100644[m
[1m--- a/model/json_backend.py[m
[1m+++ b/model/json_backend.py[m
[36m@@ -0,0 +1,70 @@[m
[32m+[m[32mimport json[m
[32m+[m[32mfrom json import JSONDecodeError[m
[32m+[m
[32m+[m[32m"""[m
[32m+[m[32mBackend communication module with json files[m
[32m+[m[32m    - creates data[m
[32m+[m[32m    - reads data[m
[32m+[m[32m    - updates data[m
[32m+[m[32m"""[m
[32m+[m
[32m+[m
[32m+[m[32m# OPEN JSON FILE AND READ ALL DATA AVAILABLE[m
[32m+[m[32mdef read_json_from_file(json_file) -> dict:[m
[32m+[m[32m    """[m
[32m+[m[32m    FUNCTION OPENS JSON FILE AND GETS ALL DATA[m
[32m+[m[32m    :param json_file:  ".json" file[m
[32m+[m[32m    :return: dict with all data[m
[32m+[m[32m    """[m
[32m+[m[32m    file = open(file=json_file, mode="r")[m
[32m+[m[32m    file_data = file.read()[m
[32m+[m[32m    try:[m
[32m+[m[32m        json_data = json.loads(file_data)[m
[32m+[m[32m        return json_data[m
[32m+[m[32m    except JSONDecodeError:[m
[32m+[m[32m        print("Fisierul {this_file} este gol".format(this_file=json_file))[m
[32m+[m[32m    file.close()[m
[32m+[m
[32m+[m
[32m+[m[32m# VERIFY IF LOADED DATA ALREADY EXISTS IN GIVEN JSON DATA[m
[32m+[m[32mdef data_is_stored(new_loaded_data: str, current_data: dict) -> bool:[m
[32m+[m[32m    """[m
[32m+[m[32m    FUNCTION CHECKS IF A NEW DATA IS STORED OR NOT IN CURRENT DATA BY COMPARING KEYS[m
[32m+[m[32m    :param new_loaded_data: KEY OF DATA TO BE UPDATED[m
[32m+[m[32m    :param current_data: DICT WITH CURRENT LOADED DATA[m
[32m+[m[32m    :return: TRUE IF DATA IS STORED, FALSE F DATA IS NOT STORED[m
[32m+[m[32m    """[m
[32m+[m[32m    temp_current_keys = list()[m
[32m+[m[32m    for current_data_keys in current_data.keys():[m
[32m+[m[32m        temp_current_keys.append(current_data_keys)[m
[32m+[m[32m    if new_loaded_data in temp_current_keys:[m
[32m+[m[32m        print("{} already stored.".format(new_loaded_data))[m
[32m+[m[32m        return True[m
[32m+[m[32m    else:[m
[32m+[m[32m        return False[m
[32m+[m
[32m+[m
[32m+[m[32m# UPDATE JSON DATA WITH NEW DATA[m
[32m+[m[32mdef update_json_data(current_data: dict, new_data_to_store: dict) -> dict:[m
[32m+[m[32m    """[m
[32m+[m[32m    FUNCTION UPDATES CURRENT DATA DICT WITH NEW DATA IF NOT STORED ALREADY[m
[32m+[m[32m    :param current_data: DICT OF CURRENT DATA LOADED IN SYSTEM[m
[32m+[m[32m    :param new_data_to_store: MODIFIED OR NEWLY CREATED DATA TO UPDATE[m
[32m+[m[32m    :return: updated current data[m
[32m+[m[32m    """[m
[32m+[m[32m    current_data.update(new_data_to_store)[m
[32m+[m[32m    return current_data[m
[32m+[m
[32m+[m
[32m+[m[32m# UPDATE JSON FILE WITH THE NEW UPDATED DATA[m
[32m+[m[32mdef update_json_file(filename, updated_jso_data: dict):[m
[32m+[m[32m    """[m
[32m+[m[32m    FUNCTION WRITES THE NEW JSON DATA TO EXISTING JSON FILE[m
[32m+[m[32m    :param filename: SPECIFIC JSON FILE TO WRITE DATA TO[m
[32m+[m[32m    :param updated_jso_data: UPDATED NEW DICT[m
[32m+[m[32m    :return: NONE[m
[32m+[m[32m    """[m
[32m+[m[32m    file = open(file=filename, mode="w")[m
[32m+[m[32m    json_data = json.dumps(updated_jso_data, indent=4)[m
[32m+[m[32m    file.write(json_data)[m
[32m+[m[32m    file.close()[m
\ No newline at end of file[m
